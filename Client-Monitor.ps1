<#

.SYNOPSIS
Gather, aggregate, and report information from client machines on the domain.
Intended to be run administratively.
Project repository and documentation located at: https://github.com/NotsoanoNimus/client-monitor
.DESCRIPTION
This script will harvest data from client machines on the network using WinRM,
 then compare the differences from the prior report to the most recent one.
Feed the script a text file with the client IPs or hostnames (doesn't matter which) separated line-by-line.
If no file is given, the script will attempt to collect hostnames from the MSAD directory dynamically.
Please refer to the "Client-MonitorConfig.ps1" file for non-parameter configuration options.
.PARAMETER Debug
Optional. Debug the script as it runs. 0 = no debug. 1 = Least verbose ---> 4 = Most verbose.
.PARAMETER ClientsList
Optional. The path to a line-delimited file of IPs/hostnames to gather information about.
.PARAMETER DeltasReport
Optional. If included as a switch to the script, a DELTAS text file will be generated in the reports directory.
This will only happen if deltas were actually detected across the target clients since the last report.
.PARAMETER NoNotifications
Optional. If included as a switch to the script, the script will NOT send email notifications at all.
.PARAMETER BCC
Optional. If included, will BCC the target address(es) in the generated notifications.
.PARAMETER NoMini
Optional. If included, the reports generated by the script will NOT be compress/mini-fied, so they become more readable.
.PARAMETER DomainUserFilter
Optional. If included, allows a manual override of the configuration variable for DomainUserFilter, where
a specific workstation or other PowerShell conditional (or groups of conditionals) can be inserted.
This will have no effect on Client Monitor instances using the ClientsList parameter, as it is specific
to the Get-ADComputer command.
It is useful for a one-time run targeting a specific set of the user domain.
.PARAMETER SnapshotMode
Optional. If included as a switch, the notifications generated by the script will be generated as
if the script is being run for the first time. It is a way to collect all current information in the
client environment. When used with the NoFilters switch, it will display a COMPLETE and UNFILTERED view
of the client environment (i.e. all collected data) in a single notification.
SPECIAL NOTE: Using SnapshotMode will NOT override the "Notification Triggers" section, so there is
still a possibility for an end-user to sieve only the information s/he wants.
.PARAMETER NoFilters
Optional. If included as a switch, the script will not apply any of the filters present in the
configuration to the generated email notification. It is best used in combination when generating a
report of ALL collected information is desired (with the SnapshotMode switch).
.PARAMETER AsAttachment
Optional. Send the HTML/plaintext generated by the report as an attachment instead of inline HTML.
.PARAMETER FlatReportCsv
Optional. Create a flat CSV report of all client information, using all columns from the TrackedValues.
This is useful to open the Client Monitor results in something like Excel, for easy sorting/navigation.
.PARAMETER Ephemeral
Optional. If included, run the script in a mode that does not generate any incremental reports. Meaning,
the monitor will not save report states or tracking updates, and will only serve to run as a deltas test
from the last set of reports, without actually updating anything.
.PARAMETER ConfigFile
Optional. Defaults to ".\Client-MonitorConfig.ps1", but can be the full path of a Client Monitor configuration file.
.PARAMETER SmtpCredential
Optional. Manually override any PSCredential object defined in the configuration for SMTP relays.
.LINK
https://github.com/NotsoanoNimus/client-monitor

#>

#Requires -Version 5



######################################################################################
# Copyright (C) 2019 "Notsoano Nimus", as a free software project
#  licensed under GNU GPLv3.
#
# Original Repository: https://github.com/NotsoanoNimus/client-monitor
# Author: Notsoano Nimus <postmaster@thestraightpath.email>
#
# This program is free software: you can redistribute it and/or modify it under
#  the terms of the GNU General Public License as published by the Free Software
#  Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/.
######################################################################################



# Gather parameters called with the application, and set the initial state as needed.
param(
    [int]$Debug = 0,
    [String]$ClientsList = "use-AD-list",
    [Switch]$DeltasReport = $False,
    [Switch]$NoNotifications = $False,
    [String]$BCC = "",
    [Switch]$NoMini = $False,
    [String]$DomainUserFilter = "",
    [Switch]$SnapshotMode = $False,
    [Switch]$NoFilters = $False,
    [Switch]$AsAttachment = $False,
    [Switch]$FlatReportCsv = $False,
    [Switch]$Ephemeral = $False,
    [String]$ConfigFile = "$(Split-Path $PSCommandPath)\Client-MonitorConfig.ps1",
    [PSCredential]$SmtpCredential = $null
)
# Immediately clear all errors.
$Error.Clear()
# Start with a few basic parameter checks and static values based on the paramters.
$CompressJSON = (-Not $NoMini)
# Ensure that the ConfigFile exists.
if(-Not(Test-Path "$($ConfigFile)")) {
    Write-Error "The specified configuration file `"$ConfigFile`" does not exist."
    exit 1
} elseif (-Not(Test-Path "$(Split-Path $PSCommandPath)\lib\imports.ps1")) {
    Write-Error "The 'lib/' directory for Client-Monitor dependencies must be available to the script!"
    exit 2
}


##################################################
#                    SOURCING                    #
##################################################
# Import all relevant Client-Monitor objects, methods, and global definitions.
# Start by getting the directory that the script is currently executing from (to ease imports).
$CliMonScriptDirectory = Split-Path $PSCommandPath

# Global configuration variables are sourced from a separate file
#  (either specified, or in the same directory as the script).
. "$($ConfigFile)"

# The 'lib/' directory is essential to the script, and the directory
#  must be in the same directory as the script.
try {
    # DEBUG: Remove/Comment this upon release. Refreshes the module each time the script runs.
    Remove-Module "CliMonClient" -ErrorAction SilentlyContinue
} catch {}
# Importing the "imports" file brings in all the necessary pieces of the Client Monitor script,
#  and also (importantly) sets the default state for all global-scope variables.
. "$CliMonScriptDirectory\lib\imports.ps1"

# Sanity check to ensure the provided config file is a valid client-monitor configuration.
if($global:CliMonConfig.ConfigImported -ne $True) {
    Write-Error ("The given configuration file `"$ConfigFile`" " +
        "is not a valid Client Monitor configuration.")
    exit 1
} elseif ($ImportedDependencies -ne $True) {
    Write-Error "Could not import the necessary dependencies for the script to run."
    exit 2
}



# Parameters (or other global variables) can be set here in a static way if the user
#  of the script would prefer the ease of never having to use one of the Switched 
#  command line parameters (like DeltasReport) with every single call.
# I left my mess here as a demonstration of how simple it is to make "permanent" tweaks
#  to some of the parameters a user might otherwise have to pass in every time.
#$global:CliMonConfig.Verbosity = 5
#$ClientsList = 'C:\temp\clients.txt'
#$CompressJSON = $False
#$DeltasReport = $True
#$SnapshotMode = $True
#$NoFilters = $True
#$FlatReportCsv = $True
#$Ephemeral = $True
#$NoNotifications = $True
#$AsAttachment = $True



##################################################
#                      MAIN                      #
##################################################
# "main" function: a very top-level view of the client-monitor lifecycle.
Function Invoke-MainRoutine() {
    # Create an exit trap that will close any remaining sessions in the case of a
    #  script-terminating error. This may need some work later on.
    trap {
        Write-Host "A critical error was encountered and the script was terminated: $_" `
            -ForegroundColor Red -BackgroundColor DarkGray
        Complete-Sessions
        # Tell the script that there was a FATAL failure.
        #  All created reports should be rolled back.
        Invoke-CliMonCleanup -TrappedError:$True
        break
    }
    # Start the global timer object.
    $global:CliMonGenTimer.Start()
    # Output the expected configuration of the environment based on the parameters supplied.
    Show-ClientMonitorRuntimeEnvironment
    # Defined in the "Miscellaneous.ps1" file is a method for verifying the configuration variables 
    #  themselves. That is called here after all things are imported and laced together.
    Update-ScriptConfiguration
    # Get a list of clients in the $global:CliMonClients variable that are valid hostnames/IPs.
    Get-ClientSessions -ClientsList $ClientsList
    # Start all associated sessions. This also sets flags for session availability and online status.
    Start-Sessions
    # Flesh out all clients that have valid/established sessions.
    #  This includes building the entire profile and report of the target's CURRENT state.
    Get-CurrentEnvironment
    # Measure the differences between an import of the client's prior profile, versus their
    #  current state. These tracked changes are compiled in the $global:CliMonDeltas variable.
    Compare-EnvironmentDeltas
    # Generate and send the notification based on the given parameters, and on the changes
    #  detected within the script.
    # If FOR ANY REASON the script fails to write or send the notification, the most recent
    #  reports generated by the current run of the script will be deleted to revert the
    #  monitor back to the previous state, and reports cleanup (i.e. deleting old reports)
    #  will be SKIPPED and IGNORED.
    # NOTE: The two functions below are named with "CliMon" to prevent overriding generics.
    if($NoNotifications -eq $False) {
        # Generate the notification body.
        Write-CliMonNotification
        # Actually send the notification.
        Send-CliMonNotification
    } elseif($NoNotifications -eq $False -And $global:CliMonNoDeltas -eq $False) {
        Write-Host ("`n`n`nChanges were found, but notifications are suppressed by the" +
            " -NoNotifications switch.") -ForegroundColor Yellow
    }
    # Close out all client sessions, and nullify their session tables.
    Complete-Sessions
    # Perform the final clean-up and related tasks. This function is defined within the
    #  "Miscellaneous.ps1" library file.
    Invoke-CliMonCleanup `
        -TrappedError:($global:CliMonEmailFailure -eq $True -Or $Ephemeral -eq $True)
}



# Call the "main" function.
Invoke-MainRoutine

# Optional: Code to run after the main routine finishes.
#  By default, it's just a simple indicator that the script is finished.
Write-Host "`n`n*****" -NoNewLine
Write-Host " JOB COMPLETE " -NoNewLine -ForegroundColor Green
Write-Host "*****`n"
# The work is finally done. The sun sets on a grateful universe.